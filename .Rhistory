scale_edge_color_continuous(low="white", high="red") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.5, width=0.3, tension=0.9, aes(colour=value)) +
scale_edge_color_continuous(low="white", high="red") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.5, width=0.3, tension=0.9, aes(colour=value)) +
scale_edge_colour_distiller(palette = "BuPu") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
# create a vertices data.frame. One line per object of our hierarchy
vertices  <-  data.frame(
name = unique(c(as.character(edges$from), as.character(edges$to))) ,
value = runif(111)
)
# create a data frame giving the hierarchical structure of your individuals
set.seed(1234)
d1 <- data.frame(from="origin", to=paste("group", seq(1,10), sep=""))
d2 <- data.frame(from=rep(d1$to, each=10), to=paste("subgroup", seq(1,100), sep="_"))
edges <- rbind(d1, d2)
# create a dataframe with connection between leaves (individuals)
all_leaves <- paste("subgroup", seq(1,100), sep="_")
connect <- rbind(
data.frame( from=sample(all_leaves, 100, replace=T) , to=sample(all_leaves, 100, replace=T)),
data.frame( from=sample(head(all_leaves), 30, replace=T) , to=sample( tail(all_leaves), 30, replace=T)),
data.frame( from=sample(all_leaves[25:30], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T)),
data.frame( from=sample(all_leaves[75:80], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T)) )
connect$value <- runif(nrow(connect))
# create a vertices data.frame. One line per object of our hierarchy
vertices  <-  data.frame(
name = unique(c(as.character(edges$from), as.character(edges$to))) ,
value = runif(111)
)
View(vertices)
View(connect)
View(vertices)
View(connect)
# Let's add a column with the group of each name. It will be useful later to color points
vertices$group  <-  edges$from[ match( vertices$name, edges$to ) ]
#Let's add information concerning the label we are going to add: angle, horizontal adjustement and potential flip
#calculate the ANGLE of the labels
vertices$id <- NA
myleaves <- which(is.na( match(vertices$name, edges$from) ))
nleaves <- length(myleaves)
vertices$id[ myleaves ] <- seq(1:nleaves)
vertices$angle <- 90 - 360 * vertices$id / nleaves
# calculate the alignment of labels: right or left
# If I am on the left part of the plot, my labels have currently an angle < -90
vertices$hjust <- ifelse( vertices$angle < -90, 1, 0)
# flip angle BY to make them readable
vertices$angle <- ifelse(vertices$angle < -90, vertices$angle+180, vertices$angle)
# Create a graph object
mygraph <- igraph::graph_from_data_frame( edges, vertices=vertices )
View(edges)
View(vertices)
View(mygraph)
# The connection object must refer to the ids of the leaves:
from  <-  match( connect$from, vertices$name)
to  <-  match( connect$to, vertices$name)
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.5, width=0.3, tension=0.9, aes(colour=value)) +
scale_edge_colour_distiller(palette = "BuPu") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.5, width=0.3, tension=0.9, aes(colour=value)) +
scale_edge_colour_distiller(palette = "BuPu") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
# Create a graph object
mygraph <- igraph::graph_from_data_frame( edges, vertices=vertices )
# The connection object must refer to the ids of the leaves:
from  <-  match( connect$from, vertices$name)
to  <-  match( connect$to, vertices$name)
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.5, width=0.3, tension=0.9, aes(colour=value)) +
scale_edge_colour_distiller(palette = "BuPu") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
View(vertices)
# create a data frame giving the hierarchical structure of your individuals
set.seed(1234)
edges <- read.delim("~/Google_drive/Genetics_connectome/HumanHubs_figures/figures/circular/heritability_CIRCedges.txt", header=TRUE)
names(edges)[names(edges) == "A2"] <- "from"
names(edges)[names(edges) == "A1"] <- "to"
connect <- read.delim("~/Google_drive/Genetics_connectome/HumanHubs_figures/figures/circular/heritability_CIRCconnect.txt", header=FALSE)
names(connect)[names(connect) == "V1"] <- "from"
names(connect)[names(connect) == "V2"] <- "to"
names(connect)[names(connect) == "V3"] <- "value"
vertices <- read.delim("~/Google_drive/Genetics_connectome/HumanHubs_figures/figures/circular/heritability_CIRCvertices.txt", header=TRUE)
names(vertices)[names(vertices) == "clust_reg"] <- "name"
names(vertices)[names(vertices) == "values"] <- "value"
# add angles
vertices$ID[1:13] <- NA
myleaves <- which(is.na( match(vertices$name, edges$from) ))
nleaves <- length(myleaves)
vertices$angle <- 90 - 360 * vertices$ID / nleaves
# calculate the alignment of labels: right or left
# If I am on the left part of the plot, my labels have currently an angle < -90
vertices$hjust <- ifelse( vertices$angle < -90, 1, 0)
# flip angle BY to make them readable
vertices$angle <- ifelse(vertices$angle < -90, vertices$angle+180, vertices$angle)
mygraph <- igraph::graph_from_data_frame( edges, vertices=vertices )
# The connection object must refer to the ids of the leaves:
from  <-  match( connect$from, vertices$name)
to  <-  match( connect$to, vertices$name)
value <- connect$value
# Basic usual argument
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour="skyblue", width=0.5) +
geom_node_text(aes(x = x*1.1, y=y*1.1, filter = leaf, label=name, angle = angle, hjust=hjust), size=1.5, alpha=1) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0,0),"cm"),
) +
expand_limits(x = c(-1.2, 1.2), y = c(-1.2, 1.2))
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.5, width=0.3, tension=0.9, aes(colour=value)) +
scale_edge_colour_distiller(palette = "BuPu") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
View(vertices)
View(edges)
data = get_con(from = from, to = to)
View(data)
to  <-  match( connect$to, vertices$name)
convalue <- connect$value
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.5, width=0.3, tension=0.9, aes(colour=convalue)) +
scale_edge_colour_distiller(palette = "BuPu") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
# The connection object must refer to the ids of the leaves:
from  <-  match( connect$from, vertices$name)
to  <-  match( connect$to, vertices$name)
connectHIGH <- read.delim("~/Google_drive/Genetics_connectome/HumanHubs_figures/figures/circular/heritability_CIRCconnectHIGH.txt", header=FALSE)
names(connectHIGH)[names(connectHIGH) == "V1"] <- "from"
names(connectHIGH)[names(connectHIGH) == "V2"] <- "to"
names(connectHIGH)[names(connectHIGH) == "V3"] <- "value"
names(edges)[names(edges) == "A1"] <- "to"
connectLOW <- read.delim("~/Google_drive/Genetics_connectome/HumanHubs_figures/figures/circular/heritability_CIRCconnectLOW.txt", header=FALSE)
names(connectLOW )[names(connectLOW ) == "V1"] <- "from"
names(connectLOW )[names(connectLOW ) == "V2"] <- "to"
names(connectLOW )[names(connectLOW ) == "V3"] <- "value"
vertices <- read.delim("~/Google_drive/Genetics_connectome/HumanHubs_figures/figures/circular/heritability_CIRCvertices.txt", header=TRUE)
names(vertices)[names(vertices) == "clust_reg"] <- "name"
names(vertices)[names(vertices) == "values"] <- "value"
# add angles
vertices$ID[1:13] <- NA
myleaves <- which(is.na( match(vertices$name, edges$from) ))
nleaves <- length(myleaves)
vertices$angle <- 90 - 360 * vertices$ID / nleaves
# calculate the alignment of labels: right or left
# If I am on the left part of the plot, my labels have currently an angle < -90
vertices$hjust <- ifelse( vertices$angle < -90, 1, 0)
# flip angle BY to make them readable
vertices$angle <- ifelse(vertices$angle < -90, vertices$angle+180, vertices$angle)
mygraph <- igraph::graph_from_data_frame( edges, vertices=vertices, )
# The connection object must refer to the ids of the leaves:
from  <-  match( connect$from, vertices$name)
to  <-  match( connect$to, vertices$name)
# The connection object must refer to the ids of the leaves:
from  <-  match( connectHIGH$from, vertices$name)
to  <-  match( connectHIGH$to, vertices$name)
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.5, width=0.3, tension=0.9, aes(colour='red)) +
scale_edge_colour_distiller(palette = "BuPu") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0,0),"cm"),
) +
expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3))
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.5, width=0.3, tension=0.9, colour="skyblue") +
scale_edge_colour_distiller(palette = "BuPu") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0,0),"cm"),
) +
expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3))
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.5, width=0.3, tension=0.9, colour="skyblue") +
#scale_edge_colour_distiller(palette = "BuPu") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
fromLOW  <-  match( connectLOW$from, vertices$name)
toLOW  <-  match( connectLOW$to, vertices$name)
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = fromHIGH, to = toHIGH), alpha=0.5, width=0.3, tension=0.9, colour="skyblue") +
#scale_edge_colour_distiller(palette = "BuPu") +
geom_conn_bundle(data = get_con(from = fromLOW, to = toLOW), alpha=0.5, width=0.3, tension=0.9, colour="skyblue") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
# The connection object must refer to the ids of the leaves:
fromHIGH  <-  match( connectHIGH$from, vertices$name)
toHIGH  <-  match( connectHIGH$to, vertices$name)
fromLOW  <-  match( connectLOW$from, vertices$name)
toLOW  <-  match( connectLOW$to, vertices$name)
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = fromHIGH, to = toHIGH), alpha=0.5, width=0.3, tension=0.9, colour="skyblue") +
#scale_edge_colour_distiller(palette = "BuPu") +
geom_conn_bundle(data = get_con(from = fromLOW, to = toLOW), alpha=0.5, width=0.3, tension=0.9, colour="skyblue") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = fromHIGH, to = toHIGH), alpha=0.5, width=0.3, tension=0.9, colour="skyblue") +
#scale_edge_colour_distiller(palette = "BuPu") +
geom_conn_bundle(data = get_con(from = fromLOW, to = toLOW), alpha=0.5, width=0.3, tension=0.9, colour="red") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = fromHIGH, to = toHIGH), alpha=0.5, width=0.3, tension=0.9, colour="grey") +
#scale_edge_colour_distiller(palette = "BuPu") +
geom_conn_bundle(data = get_con(from = fromLOW, to = toLOW), alpha=0.5, width=0.3, tension=0.9, colour="red") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = fromHIGH, to = toHIGH), alpha=0.8, width=0.3, tension=0.9, colour="grey") +
#scale_edge_colour_distiller(palette = "BuPu") +
geom_conn_bundle(data = get_con(from = fromLOW, to = toLOW), alpha=0.8, width=0.3, tension=0.9, colour="red") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
theme_void() +
theme(
legend.position="none",
plot.margin=unit(c(0,0,0,0),"cm"),
) +
expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3))
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = fromHIGH, to = toHIGH), alpha=0.8, width=0.3, tension=0.9, colour="grey") +
#scale_edge_colour_distiller(palette = "BuPu") +
geom_conn_bundle(data = get_con(from = fromLOW, to = toLOW), alpha=0.8, width=0.3, tension=0.9, colour="red") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, hjust=hjust, colour=group), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
library(ggraph)
library(igraph)
library(tidyverse)
library(RColorBrewer)
# create a data frame giving the hierarchical structure of your individuals
set.seed(1234)
edges <- read.delim("~/Google_drive/Genetics_connectome/HumanHubs_figures/figures/circular/heritability_CIRCedges.txt", header=TRUE)
names(edges)[names(edges) == "A2"] <- "from"
names(edges)[names(edges) == "A1"] <- "to"
connectHIGH <- read.delim("~/Google_drive/Genetics_connectome/HumanHubs_figures/figures/circular/heritability_CIRCconnectHIGH.txt", header=FALSE)
names(connectHIGH)[names(connectHIGH) == "V1"] <- "from"
names(connectHIGH)[names(connectHIGH) == "V2"] <- "to"
names(connectHIGH)[names(connectHIGH) == "V3"] <- "value"
names(edges)[names(edges) == "A1"] <- "to"
connectLOW <- read.delim("~/Google_drive/Genetics_connectome/HumanHubs_figures/figures/circular/heritability_CIRCconnectLOW.txt", header=FALSE)
names(connectLOW )[names(connectLOW ) == "V1"] <- "from"
names(connectLOW )[names(connectLOW ) == "V2"] <- "to"
names(connectLOW )[names(connectLOW ) == "V3"] <- "value"
vertices <- read.delim("~/Google_drive/Genetics_connectome/HumanHubs_figures/figures/circular/heritability_CIRCvertices.txt", header=TRUE)
names(vertices)[names(vertices) == "clust_reg"] <- "name"
names(vertices)[names(vertices) == "values"] <- "value"
# add angles
vertices$ID[1:13] <- NA
myleaves <- which(is.na( match(vertices$name, edges$from) ))
nleaves <- length(myleaves)
vertices$angle <- 90 - 360 * vertices$ID / nleaves
# calculate the alignment of labels: right or left
# If I am on the left part of the plot, my labels have currently an angle < -90
vertices$hjust <- ifelse( vertices$angle < -90, 1, 0)
# flip angle BY to make them readable
vertices$angle <- ifelse(vertices$angle < -90, vertices$angle+180, vertices$angle)
mygraph <- igraph::graph_from_data_frame( edges, vertices=vertices, )
# The connection object must refer to the ids of the leaves:
fromHIGH  <-  match( connectHIGH$from, vertices$name)
toHIGH  <-  match( connectHIGH$to, vertices$name)
fromLOW  <-  match( connectLOW$from, vertices$name)
toLOW  <-  match( connectLOW$to, vertices$name)
groupColors <- c("#000000", "#FFDD89", "#957244", "#F26223", "#000000", "#FFDD89", "#957244", "#F26223", "#000000", "#FFDD89", "#957244", "#F26223")
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = fromHIGH, to = toHIGH), alpha=0.8, width=0.3, tension=0.9, colour="grey") +
#scale_edge_colour_distiller(palette = "BuPu") +
geom_conn_bundle(data = get_con(from = fromLOW, to = toLOW), alpha=0.8, width=0.3, tension=0.9, colour="red") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, hjust=hjust, colour=groupColors), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = fromHIGH, to = toHIGH), alpha=0.8, width=0.3, tension=0.9, colour="grey") +
#scale_edge_colour_distiller(palette = "BuPu") +
geom_conn_bundle(data = get_con(from = fromLOW, to = toLOW), alpha=0.8, width=0.3, tension=0.9, colour="red") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, hjust=hjust, colour=groupColors), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=groupColors, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
View(vertices)
# Create dummy data
m <- matrix(c(11975,  5871, 8916, 2868,
1951, 10048, 2060, 6171,
8010, 16145, 8090, 8045,
1013,   990,  940, 6907),
byrow = TRUE,
nrow = 4, ncol = 4)
# A vector of 4 colors for 4 groups
haircolors <- c("black", "blonde", "brown", "red")
dimnames(m) <- list(have = haircolors,
prefer = haircolors)
groupColors <- c("#000000", "#FFDD89", "#957244", "#F26223")
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
install.packages("chorddiag")
library(chorddiag)
install.packages(chorddiag)
install.packages("chorddiag")
View(vertices)
groupColors <-
colors[2:13] = c("#000000", "#FFDD89", "#957244", "#F26223", "#000000", "#FFDD89", "#957244", "#F26223", "#000000", "#FFDD89", "#957244", "#F26223")
colors[14:373] = 'blue'
colors = vector(mode = "character", length = 373)
colors[2:13] = c("#000000", "#FFDD89", "#957244", "#F26223", "#000000", "#FFDD89", "#957244", "#F26223", "#000000", "#FFDD89", "#957244", "#F26223")
colors[14:373] = 'blue'
colors[1] = NA
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_conn_bundle(data = get_con(from = fromHIGH, to = toHIGH), alpha=0.8, width=0.3, tension=0.9, colour="grey") +
#scale_edge_colour_distiller(palette = "BuPu") +
geom_conn_bundle(data = get_con(from = fromLOW, to = toLOW), alpha=0.8, width=0.3, tension=0.9, colour="red") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, hjust=hjust, colour=colors), size=2, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=colors, size=value, alpha=0.2)) +
scale_colour_manual(values= rep( brewer.pal(12,"Paired") , 30)) +
scale_size_continuous( range = c(0.1,10) )
install_github("mattflor/chorddiag")
devtools::install_github("mattflor/chorddiag")
install_github("mattflor/chorddiag")
devtools::install_github("hadley/devtools")
install.packages("devtools")
devtools::install_github("hadley/devtools")
install_github("mattflor/chorddiag")
devtools::install_github("mattflor/chorddiag")
library(chorddiag)
# Create dummy data
m <- matrix(c(11975,  5871, 8916, 2868,
1951, 10048, 2060, 6171,
8010, 16145, 8090, 8045,
1013,   990,  940, 6907),
byrow = TRUE,
nrow = 4, ncol = 4)
# A vector of 4 colors for 4 groups
haircolors <- c("black", "blonde", "brown", "red")
dimnames(m) <- list(have = haircolors,
prefer = haircolors)
groupColors <- c("#000000", "#FFDD89", "#957244", "#F26223")
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
p
# Create dummy data
m <- matrix(c(11975,  5871, 8916, 2868,
1951, 10048, 2060, 6171,
8010, 16145, 8090, 8045,
1013,   990,  940, 6907,
1013,   990,  940, 6907),
byrow = TRUE,
nrow = 5, ncol = 4)
# A vector of 4 colors for 4 groups
haircolors <- c("black", "blonde", "brown", "red")
dimnames(m) <- list(have = haircolors,
prefer = haircolors)
# Create dummy data
m <- matrix(c(11,  5871, 8916, 2868,
1951, 10048, 2060, 6171,
8010, 16145, 8090, 8045,
1013,   990,  940, 6907),
byrow = TRUE,
nrow = 4, ncol = 4)
# A vector of 4 colors for 4 groups
haircolors <- c("black", "blonde", "brown", "red")
dimnames(m) <- list(have = haircolors,
prefer = haircolors)
groupColors <- c("#000000", "#FFDD89", "#957244", "#F26223")
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
p
# Create dummy data
m <- matrix(c(11000,  5871, 8916, 2868,
1951, 10048, 2060, 6171,
8010, 16145, 8090, 8045,
1013,   990,  940, 6907),
byrow = TRUE,
nrow = 4, ncol = 4)
# A vector of 4 colors for 4 groups
haircolors <- c("black", "blonde", "brown", "red")
dimnames(m) <- list(have = haircolors,
prefer = haircolors)
groupColors <- c("#000000", "#FFDD89", "#957244", "#F26223")
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
p
# Create dummy data
m <- matrix(c(11,  0, 8, 0,
19, 10, 0, 61,
0, 16, 0, 8,
10,   9,  90, 60),
byrow = TRUE,
nrow = 4, ncol = 4)
# A vector of 4 colors for 4 groups
haircolors <- c("black", "blonde", "brown", "red")
dimnames(m) <- list(have = haircolors,
prefer = haircolors)
groupColors <- c("#000000", "#FFDD89", "#957244", "#F26223")
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
p
numbers <- sample(c(1:1000), 100, replace = T)
data <- matrix( numbers, ncol=5)
View(data)
rownames(data) <- paste0("orig-", seq(1,20))
colnames(data) <- paste0("dest-", seq(1,5))
# Load the circlize library
library(circlize)
install.packages("circlize")
# Load the circlize library
install.packages("circlize")
library(circlize)
# Make the circular plot
chordDiagram(data, transparency = 0.5)
View(data)
install.packages("OpenMx")
install.packages("OpenMx")
source('https://openmx.ssri.psu.edu/software/getOpenMx.R')
require(OpenMX)
require('OpenMX')
which R
install.packages("OpenMX")
install.packages("OpenMx")
library("biomaRt")
library("dplyr")
grch38 = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="ensembl37.org", path="/biomart/martservice", dataset="hsapiens_gene_ensembl")
grch38 = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="ensembl.org", path="/biomart/martservice", dataset="hsapiens_gene_ensembl")
View(grch38)
searchFilters(mart = ensembl, pattern = "ensembl.*id")
searchFilters(mart = grch38, pattern = "ensembl.*id")
searchFilters(mart = grch38, pattern = "Gene stable")
searchFilters(mart = grch38, pattern = "Transcript stable")
searchFilters(mart = grch38, pattern = "Protein stable")
searchFilters(mart = grch38, pattern = "Gene name")
searchFilters(mart = grch38, pattern = "name")
searchFilters(mart = grch38, pattern = "HGNC")
searchFilters(mart = grch38, pattern = "NCBI")
getBM(attributes=c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_peptide_id', 'external_gene_name', 'hgnc_symbol', 'entrezgene_id'),
mart = grch38)
DATAtable = getBM(attributes=c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_peptide_id', 'external_gene_name', 'hgnc_symbol', 'entrezgene_id'),
mart = grch38)
View(DATAtable)
View(DATAtable)
# get BIOMART file using querie
setwd("~/Google_drive/PostDoc/projects/GWASdrugs/data/GWASlists")
ensembl = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="ensembl.org", path="/biomart/martservice", dataset="hsapiens_gene_ensembl")
DATAtable = getBM(attributes=c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_peptide_id', 'external_gene_name', 'hgnc_symbol', 'entrezgene_id'),
mart = ensembl)
write.table(DATAtable, file = sprintf("BIOMART_geneIDs.txt"),
sep = "\t", row.names = FALSE, quote=FALSE)
searchFilters(mart = grch38, pattern = "HGNC")
DATAtable = getBM(attributes=c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_peptide_id', 'external_gene_name', 'hgnc_symbol', 'hgnc_id ', 'entrezgene_id'),
mart = ensembl)
DATAtable = getBM(attributes=c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_peptide_id', 'external_gene_name', 'hgnc_symbol', 'hgnc_id', 'entrezgene_id'),
mart = ensembl)
write.table(DATAtable, file = sprintf("BIOMART_geneIDs.txt"),
sep = "\t", row.names = FALSE, quote=FALSE)
setwd("~/Google_drive/PostDoc/projects/GWASdrugs")
write.table(DATAtable, file = sprintf("data/GWASlists/BIOMART_geneIDs.txt"),
sep = "\t", row.names = FALSE, quote=FALSE)
searchFilters(mart = grch38, pattern = "ensembl_gene_id")
DATAtable = getBM(attributes=c('ensembl_gene_id', 'ensembl_gene_id_version', 'ensembl_peptide_id', 'ensembl_peptide_id_version', 'external_gene_name', 'hgnc_symbol', 'hgnc_id', 'entrezgene_id'),
mart = ensembl)
View(DATAtable)
