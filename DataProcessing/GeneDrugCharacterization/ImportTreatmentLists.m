function indicatorTable = ImportTreatmentLists()
%IMPORTFILE Import numeric data from a text file as a matrix.
%   TREATMENTLISTSZ4THMAY2018 = IMPORTFILE(FILENAME) Reads data from text
%   file FILENAME for the default selection.
%
%   TREATMENTLISTSZ4THMAY2018 = IMPORTFILE(FILENAME, STARTROW, ENDROW)
%   Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   TreatmentlistSZ4thMay2018 = importfile('Treatment-list-SZ-4thMay2018.csv', 1, 49);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/05/11 11:32:02

whatDiseases = {'ADHD','BIP','SZP','MDD','pulmonary','cardiology','gastro','diabetes'};
numDiseases = length(whatDiseases);

%% Initialize variables.
delimiter = ',';
startRow = 1;
endRow = inf;
%% Format for each line of text:
%   column1: text (%q)
%	column2: text (%q)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%[^\n\r]';

dataTable = struct();

for k = 1:numDiseases
    whatDisease = whatDiseases{k};
    switch whatDisease
        case 'ADHD'
            fileName = 'Treatment-list-ADHD-4thMay2018.csv';
        case 'BIP'
            fileName = 'Treatment-list-BIP-7thMay2018.csv';
        case 'SZP'
            fileName = 'Treatment-list-SZ-4thMay2018.csv';
        case 'MDD'
            fileName = 'Treatment-list-MDD-7thMay2018.csv';
        case 'pulmonary'
            fileName = 'Treatment-list-pulmonary-4thMay2018.csv';
        case 'cardiology'
            fileName = 'Treatment-list-cardiology-4thMay2018.csv';
        case 'gastro'
            fileName = 'Treatment-list-gastro-4thMay2018.csv';
        case 'diabetes'
            fileName = 'Treatment-list-diabetes-25thMay2018.csv';
        otherwise
            error('Unknown disease: ''%s''',whatDisease);
    end

    %% Open the text file.
    fileID = fopen(fileName,'r');

    %% Read columns of data according to the format.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', 1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for block=2:length(startRow)
        frewind(fileID);
        dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
        for col=1:length(dataArray)
            dataArray{col} = [dataArray{col};dataArrayBlock{col}];
        end
    end
    %% Close the text file.
    fclose(fileID);

    %% Create output variable
    dataTable.(whatDisease) = table(dataArray{1:end-1}, 'VariableNames', {'Name','Target'});
end

%-------------------------------------------------------------------------------
% Get a list of all genes mentioned:
geneLists = cell(numDiseases,1);
counts = cell(numDiseases,1);
for k = 1:numDiseases
    whatDisease = whatDiseases{k};
    geneList = dataTable.(whatDisease).Target;
    geneList = cellfun(@(x)strsplit(x,','),geneList,'UniformOutput',false);
    geneList = horzcat(geneList{:});
    % Genes that appear in drugs for disorder k:
    geneList = regexprep(geneList,'\W','');
    % Count how many appear:
    frequencyTable = tabulate(geneList);
    [~,ix] = sort([frequencyTable{:,2}],'descend');
    counts{k} = [frequencyTable{ix,2}];
    geneLists{k} = frequencyTable(ix,1);

    % Talk to me:
    numGenesTreat = length(geneLists{k});
    fprintf(1,'%u genes are targeted by existing drugs for %s:\n',numGenesTreat,whatDisease);
    for i = 1:numGenesTreat
        fprintf(1,'%s, ',geneLists{k}{i});
    end
    fprintf(1,'\n');
end

%-------------------------------------------------------------------------------
% Process into a unique set of genes:
allGenes = unique(vertcat(geneLists{:}));
numGenes = length(allGenes);
fprintf(1,'%u genes assigned to at least one drug for a disorder\n',numGenes);

%-------------------------------------------------------------------------------
% Construct a gene x disease table
indicatorMatrix = zeros(numGenes,numDiseases);
for i = 1:numGenes
    for j = 1:numDiseases
        theGeneIsHere = strcmp(allGenes{i},geneLists{j});
        if any(theGeneIsHere)
            indicatorMatrix(i,j) = counts{j}(theGeneIsHere);
        end
    end
end
%-------------------------------------------------------------------------------
% Convert to proportions:
propMatrix = indicatorMatrix;
for j = 1:numDiseases
    propMatrix(:,j) = propMatrix(:,j)/sum(propMatrix(:,j))*100;
end
meanRow = mean(propMatrix,2);

% Make a table:
indicatorTable = array2table(indicatorMatrix,'RowNames',allGenes,...
                                    'VariableNames',whatDiseases);
percIndicatorTable = array2table(propMatrix,'RowNames',allGenes,...
                                    'VariableNames',whatDiseases);

% Sort the table:
[~,ix] = sort(meanRow,'descend');
indicatorTable = indicatorTable(ix,:);
percIndicatorTable = percIndicatorTable(ix,:);

end
